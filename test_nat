type nat = A -o !(A -o A) -o A

let zero = \ (x : A) (f : !(A -o A)) . x
let succ = \ (n : [nat]) (x : A) (f : !(A -o A)) . n (f x) f
let one = [succ] [zero]


let add = \ (n : [nat]) (m : [nat]) (x : A) (f : !(A -o A)) . n (m x f) f 
let mul = \ (n : ![nat]) (m : [nat]) (x : A) (f : !(A -o A)) . m x !(\ x : A . n x f)


type bool = B + B




